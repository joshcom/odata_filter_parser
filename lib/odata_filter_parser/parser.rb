#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'
module OdataFilterParser
  class Parser < Racc::Parser

require_relative 'parser_methods'
include OdataFilterParser::ParserMethods
##### State transition tables begin ###

racc_action_table = [
     9,    10,    11,    12,    13,    14,    15,    16,     9,    10,
    11,    12,    13,    14,    15,    16,     9,    10,    11,    12,
    13,    14,    15,    16,    20,    21,    17,    18,     3,     6,
     5,     4,    23 ]

racc_action_check = [
     5,     5,     5,     5,     5,     5,     5,     5,    21,    21,
    21,    21,    21,    21,    21,    21,    18,    18,    18,    18,
    18,    18,    18,    18,    19,    19,     7,     7,     0,     4,
     2,     1,    22 ]

racc_action_pointer = [
    23,    31,    28,   nil,    29,    -6,   nil,    23,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,    21,
   nil,     2,    29,   nil ]

racc_action_default = [
   -14,   -14,   -14,    -4,   -14,   -14,    24,   -14,    -5,    -6,
    -7,    -8,    -9,   -10,   -11,   -12,   -13,    -1,   -14,   -14,
    -2,   -14,   -14,    -3 ]

racc_goto_table = [
     7,     2,     1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    19,   nil,   nil,    22 ]

racc_goto_check = [
     3,     2,     1,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     3,   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,     2,     1,    -5,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     8 ]

racc_reduce_table = [
  0, 0, :racc_error,
  4, 15, :_reduce_1,
  6, 15, :_reduce_2,
  8, 15, :_reduce_3,
  1, 16, :_reduce_4,
  1, 17, :_reduce_5,
  1, 18, :_reduce_6,
  1, 18, :_reduce_7,
  1, 18, :_reduce_8,
  1, 18, :_reduce_9,
  1, 18, :_reduce_10,
  1, 18, :_reduce_11,
  1, 18, :_reduce_12,
  1, 18, :_reduce_13 ]

racc_reduce_n = 14

racc_shift_n = 24

racc_token_table = {
  false => 0,
  :error => 1,
  :LEFT_PARENTHESIS => 2,
  :RIGHT_PARENTHESIS => 3,
  :COMMA => 4,
  :METHOD_CALL => 5,
  :NULL_LITERAL => 6,
  :BOOLEAN_LITERAL => 7,
  :STRING_LITERAL => 8,
  :DATETIME_LITERAL => 9,
  :INT_16_LITERAL => 10,
  :INT_32_LITERAL => 11,
  :INT_64_LITERAL => 12,
  :DECIMAL_LITERAL => 13 }

racc_nt_base = 14

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LEFT_PARENTHESIS",
  "RIGHT_PARENTHESIS",
  "COMMA",
  "METHOD_CALL",
  "NULL_LITERAL",
  "BOOLEAN_LITERAL",
  "STRING_LITERAL",
  "DATETIME_LITERAL",
  "INT_16_LITERAL",
  "INT_32_LITERAL",
  "INT_64_LITERAL",
  "DECIMAL_LITERAL",
  "$start",
  "intersectsMethodCallExpr",
  "method_call",
  "function_parameter",
  "primitiveLiteral" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
tokenize_function(val)
    result
end

def _reduce_2(val, _values, result)
tokenize_function(val)
    result
end

def _reduce_3(val, _values, result)
tokenize_function(val)
    result
end

def _reduce_4(val, _values, result)
 prepare_next_method(val[0]) 
    result
end

def _reduce_5(val, _values, result)
 collect_function_parameter(val[0]) 
    result
end

def _reduce_6(val, _values, result)
 record_last_type(:null)   
    result
end

def _reduce_7(val, _values, result)
 record_last_type(:boolean)
    result
end

def _reduce_8(val, _values, result)
 record_last_type(:string) 
    result
end

def _reduce_9(val, _values, result)
 record_last_type(:datetime) 
    result
end

def _reduce_10(val, _values, result)
 record_last_type(:int_16) 
    result
end

def _reduce_11(val, _values, result)
 record_last_type(:int_32) 
    result
end

def _reduce_12(val, _values, result)
 record_last_type(:int_64) 
    result
end

def _reduce_13(val, _values, result)
 record_last_type(:int_64) 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module OdataFilterParser
